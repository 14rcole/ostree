#!/usr/bin/python

# Copyright (C) 2011 Colin Walters <walters@verbum.org>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

import os,sys,re,subprocess,tempfile,shutil
import argparse

def get_build_env():
    return {'HOME' : '/', 
            'HOSTNAME' : 'ostbuild',
            'LANG': 'C',
            'PATH' : '/usr/bin:/bin:/usr/sbin:/sbin',
            'SHELL' : '/bin/bash',
            'TERM' : 'vt100',
            'TMPDIR' : '/tmp',
            'TZ': 'EST5EDT'
            }


parser = argparse.ArgumentParser(description="Build a module in a given root")
parser.add_argument('--repo')
parser.add_argument('--resultdir')
parser.add_argument('--branch')
parser.add_argument('--debug-shell', type=bool)

args = parser.parse_args()

def log(m):
    sys.stdout.write(m)
    sys.stdout.write('\n')
    sys.stdout.flush()

basename = os.path.basename(os.getcwd())

tmpdir = tempfile.mkdtemp(prefix='ostree-chroot-compile-')
log("Using temporary directory: %s" % (tmpdir, ))

child_tmpdir=os.path.join(tmpdir, 'tmp')
os.mkdir(child_tmpdir)

rev = subprocess.check_output(['ostree', '--repo=' + args.repo, 'rev-parse', args.branch])
rev=rev.strip()

rootdir = os.path.join(tmpdir, 'root-' + rev)
subprocess.check_call(['ostree', '--repo=' + args.repo, 'checkout', '-U', rev, rootdir])
log("Checked out root: %s" % (rootdir, ))

builddir = os.path.join(rootdir, 'ostbuild');
os.mkdir(builddir)
os.mkdir(os.path.join(builddir, 'source'))
os.mkdir(os.path.join(builddir, 'source', basename))
os.mkdir(os.path.join(builddir, 'results'))

chroot_sourcedir = os.path.join('/ostbuild', 'source', basename)

# We need to search PATH here manually so we correctly pick up an
# ostree install in e.g. ~/bin even though we're going to set PATH
# below for our children inside the chroot.
ostbuild_user_chroot_path = None
for dirname in os.environ['PATH'].split(':'):
    path = os.path.join(dirname, 'ostbuild-user-chroot')
    if os.access(path, os.X_OK):
        ostbuild_user_chroot_path = path
        break
if ostbuild_user_chroot_path is None:
    ostbuild_user_chroot_path = 'ostbuild-user-chroot'

child_args = [ostbuild_user_chroot_path, '--unshare-pid', '--unshare-net', '--unshare-ipc',
              '--mount-readonly', '/',
              '--mount-proc', '/proc', 
              '--mount-bind', '/dev', '/dev',
              '--mount-bind', child_tmpdir, '/tmp',
              '--mount-bind', os.getcwd(), chroot_sourcedir,
              '--mount-bind', args.resultdir, '/ostbuild/results',
              rootdir,
              '/bin/sh']
if not args.debug_shell:
    child_args += ['-c',
             'cd "%s" && ostbuild-compile-one-impl OSTBUILD_RESULTDIR=/ostbuild/results' % (chroot_sourcedir, )
             ]
log("Running: %r" % (child_args, ))
subprocess.check_call(child_args, env=get_build_env())

shutil.rmtree(tmpdir)
                       
